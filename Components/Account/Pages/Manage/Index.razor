@page "/Account/Manage"

@rendermode InteractiveServer

@inject IProfileRepository ProfileRepo
@inject NavigationManager NavManager
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS

@attribute [Authorize]

<PageTitle>Manage Profile</PageTitle>

<h3>Manage Profile</h3>

<div class="row">
    <EditForm method="post" Model="ModelInput" OnValidSubmit="OnValidSubmitAsync" FormName="edit" Enhance>
        <DataAnnotationsValidator />
        @if (ModelInput.Id > 0)
        {
            <InputNumber @bind-Value="ModelInput.Id" hidden></InputNumber>
            <InputText @bind-Value="ModelInput.UserID" hidden></InputText>
            <InputText @bind-Value="ModelInput.ProfilePicture" hidden></InputText>
        }
        <div class="row mb-3">
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="firstname" @bind-Value="ModelInput.FirstName" class="form-control" autocomplete="FirstName" aria-required="true" placeholder="Please enter First Name." />
                    <label for="firstname" class="form-label">First Name</label>
                    <ValidationMessage For="@(() => ModelInput.FirstName)" class="text-danger" />
                </div>
            </div>
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="lastname" @bind-Value="ModelInput.LastName" class="form-control" autocomplete="LastName" aria-required="true" placeholder="Please enter Last Name." />
                    <label for="lastname" class="form-label">Last Name</label>
                    <ValidationMessage For="@(() => ModelInput.LastName)" class="text-danger" />
                </div>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="location" @bind-Value="ModelInput.Location" class="form-control" autocomplete="Location" aria-required="true" placeholder="Please enter Location." />
                    <label for="location" class="form-label">Location</label>
                    <ValidationMessage For="@(() => ModelInput.Location)" class="text-danger" />
                </div>
            </div>
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="industry" @bind-Value="ModelInput.Industry" class="form-control" autocomplete="Industry" aria-required="true" placeholder="Please enter Industry." />
                    <label for="industry" class="form-label">Industry</label>
                    <ValidationMessage For="@(() => ModelInput.Industry)" class="text-danger" />
                </div>
            </div>
        </div>
        <div class="form-floating mb-3">
            <InputText id="headline" @bind-Value="ModelInput.Headline" class="form-control" autocomplete="Headline" aria-required="true" placeholder="Please enter Headline." />
            <label for="headline" class="form-label">Headline</label>
            <ValidationMessage For="@(() => ModelInput.Headline)" class="text-danger" />
        </div>
        <div class="form-group mb-3">
            <label for="summary" class="form-label">Summary</label>
            <InputTextArea id="summary" @bind-Value="ModelInput.Summary" class="form-control" rows="10" placeholder="Please enter Summary." />
            <ValidationMessage For="@(() => ModelInput.Summary)" class="text-danger" />
        </div>
        <div class="row mb-3">
            <div class="col-3">
                <img id="imgPreview" class="border-4 img-thumbnail rounded mx-auto d-block"
                     src="@(string.IsNullOrEmpty(ModelInput.ProfilePicture) ? "/images/profile/avatar.png" : ModelInput.ProfilePicture)" width="250" />
            </div>
            <div class="col-9 d-flex flex-column justify-content-between">
                <div>
                    <label for="ProfilePicInput" class="form-label">Profile Picture</label>
                    <InputFile id="ProfilePicInput" class="form-control" OnChange="OnImageChange"></InputFile>
                </div>
                @if (!ModelInput.ProfilePicture.Contains("avatar.png") && !string.IsNullOrEmpty(ModelInput.ProfilePicture) || ImageFile is not null)
                {
                    <Button Class="align-self-end" Color="ButtonColor.Danger" @onclick="ClearImagePreview">Remove Image</Button>
                }
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
</div>

<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

@code {
    [Inject] protected ToastService ToastService { get; set; } = default!;

    //Database entity
    private Profile? Profile { get; set; } = default!;

    [SupplyParameterFromForm]
    private Profile ModelInput { get; set; } = new() { ProfilePicture = "/images/profile/avatar.png" };

    //Identity
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private string? CurrentUserId;

    //Image Upload
    private string OldImage = string.Empty;
    private IBrowserFile ImageFile = default!;
    private const long MaxFileSize = 15 * 1024 * 1024; // 15 MB
    private static readonly HashSet<string> AllowedExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        ".jpg", ".jpeg", ".png"
    };

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            CurrentUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            await GetProfile();
        }
    }

    private async Task GetProfile()
    {
        Profile = await ProfileRepo.GetAsync(filter: f => f.UserID == CurrentUserId);

        if (Profile is not null)
        {
            if (ModelInput.UserID != CurrentUserId)
            {
                ModelInput = Profile;
            }
            OldImage = Profile.ProfilePicture;
        }
        else
        {
            if (ModelInput.UserID != CurrentUserId)
            {
                ModelInput.UserID = CurrentUserId;
            }
        }
    }

    private async Task OnImageChange(InputFileChangeEventArgs e)
    {
        var extension = Path.GetExtension(e.File.Name);

        if (!AllowedExtensions.Contains(extension))
        {
            Console.WriteLine($"File extension {extension} is not allowed.");
            ImageFile = default!;
            return;
        }

        if (e.File.Size > MaxFileSize)
        {
            Console.WriteLine($"File size {e.File.Size} exceeds the maximum allowed size of {MaxFileSize} bytes.");
            ImageFile = default!;
            return;
        }

        ImageFile = e.File;
        await JS.InvokeVoidAsync("previewImage", "ProfilePicInput", "imgPreview");
    }

    private async Task UpsertImage()
    {
        string fileName = Guid.NewGuid() + Path.GetExtension(ImageFile.Name);
        string imageURL = @"images\profile\" + fileName;
        string filePath = Path.Combine(Environment.WebRootPath, imageURL);

        await using FileStream fs = new(filePath, FileMode.Create);
        await ImageFile.OpenReadStream(MaxFileSize).CopyToAsync(fs);
        ModelInput.ProfilePicture = imageURL;
        OldImage = imageURL;
    }

    private async Task ClearImagePreview()
    {
        ImageFile = default!;
        ModelInput.ProfilePicture = string.Empty;
        await JS.InvokeVoidAsync("resetPreviewImage", "ProfilePicInput", "imgPreview");

    }

    private void DeleteOldImage()
    {
        if (!OldImage.Contains("avatar.png"))
        {
            string oldFilePath = Path.Combine(Environment.WebRootPath, OldImage.TrimStart('\\'));

            if (System.IO.File.Exists(oldFilePath))
            {
                System.IO.File.Delete(oldFilePath);
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (ImageFile is not null)
        {
            DeleteOldImage();
            await UpsertImage();
        }
        else
        {
            if (!string.IsNullOrEmpty(OldImage))
            {
                DeleteOldImage();
                ModelInput.ProfilePicture = "/images/profile/avatar.png";
            }
        }

        if (Profile is null)
        {
            await ProfileRepo.CreateAsync(ModelInput);
            try
            {
                // TODO: call the service/api to save the employee details

                ToastService.Notify(new(ToastType.Success, "Your profile has been successfully created."));
            }
            catch (Exception ex)
            {
                // handle exception

                ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
            }

        }
        else
        {
            await ProfileRepo.UpdateAsync(ModelInput);
            try
            {
                // TODO: call the service/api to save the employee details

                ToastService.Notify(new(ToastType.Success, "Your profile has been successfully updated. Please review the changes."));
            }
            catch (Exception ex)
            {
                // handle exception

                ToastService.Notify(new(ToastType.Danger, $"Error: {ex.Message}."));
            }

        }
    }
}
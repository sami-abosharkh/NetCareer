@page "/Account/Manage"
@inject IProfileRepository ProfileRepo
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Manage Profile</PageTitle>

<h3>Manage Profile</h3>

<div class="row">
    <EditForm method="post" Model="ModelInput" OnValidSubmit="OnValidSubmitAsync" FormName="edit" Enhance>
        <DataAnnotationsValidator />
        @if (ModelInput.Id > 0)
        {
            <InputNumber @bind-Value="ModelInput.Id" hidden></InputNumber>
            <InputText @bind-Value="ModelInput.UserID" hidden></InputText>
            <InputText @bind-Value="ModelInput.ProfilePicture" hidden></InputText>
        }
        <div class="row mb-3">
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="firstname" @bind-Value="ModelInput.FirstName" class="form-control" autocomplete="FirstName" aria-required="true" placeholder="Please enter First Name." />
                    <label for="firstname" class="form-label">First Name</label>
                    <ValidationMessage For="@(() => ModelInput.FirstName)" class="text-danger" />
                </div>
            </div>
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="lastname" @bind-Value="ModelInput.LastName" class="form-control" autocomplete="LastName" aria-required="true" placeholder="Please enter Last Name." />
                    <label for="lastname" class="form-label">Last Name</label>
                    <ValidationMessage For="@(() => ModelInput.LastName)" class="text-danger" />
                </div>
            </div>
        </div>
        <div class="form-floating mb-3">
            <InputText id="headline" @bind-Value="ModelInput.Headline" class="form-control" autocomplete="Headline" aria-required="true" placeholder="Please enter Headline." />
            <label for="headline" class="form-label">Headline</label>
            <ValidationMessage For="@(() => ModelInput.Headline)" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputTextArea id="summary" @bind-Value="ModelInput.Summary" class="form-control" rows="10" autocomplete="Summary" aria-required="true" placeholder="Please enter Summary." />
            <label for="summary" class="form-label">Summary</label>
            <ValidationMessage For="@(() => ModelInput.Summary)" class="text-danger" />
        </div>
        <div class="row mb-3">
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="location" @bind-Value="ModelInput.Location" class="form-control" autocomplete="Location" aria-required="true" placeholder="Please enter Location." />
                    <label for="location" class="form-label">Location</label>
                    <ValidationMessage For="@(() => ModelInput.Location)" class="text-danger" />
                </div>
            </div>
            <div class="col-6">
                <div class="form-floating">
                    <InputText id="industry" @bind-Value="ModelInput.Industry" class="form-control" autocomplete="Industry" aria-required="true" placeholder="Please enter Industry." />
                    <label for="industry" class="form-label">Industry</label>
                    <ValidationMessage For="@(() => ModelInput.Industry)" class="text-danger" />
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Save</button>
    </EditForm>
</div>

@code {
    [SupplyParameterFromForm]
    public Profile ModelInput { get; set; } = new();

    //Identity
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public Profile? Profile { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            string? userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            List<string> userRoles = authState.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();

            if (!userRoles.Contains(SD.Role_JobSeeker))
            {
                NavManager.NavigateTo("/Account/Manage/Phone");
            }

            Profile = await ProfileRepo.GetAsync(filter: f => f.UserID == userId);

            if (Profile is not null)
            {
                if (ModelInput.UserID != userId)
                {
                    ModelInput = Profile;
                }
            }
            else
            {
                ModelInput.UserID = userId;
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (Profile is null)
        {
            await ProfileRepo.CreateAsync(ModelInput);
        }
        else
        {
            await ProfileRepo.UpdateAsync(ModelInput);
        }
    }
}

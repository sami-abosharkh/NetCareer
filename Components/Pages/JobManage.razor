@page "/Job/Manage/{CurrentJobPostId:int}"

@inject NavigationManager NavManager
@inject IJobPostRepository JobPostRepo
@inject IJobApplicationRepository JobApplicationRepo
@inject IJSRuntime JS

@rendermode InteractiveServer

@attribute [Authorize(Roles = $"{SD.Role_Admin},{SD.Role_Recruiter}")]

<PageTitle>Post Management</PageTitle>
<br />

@if (JobPost is not null)
{
    <div class="container rounded bg-white py-3 shadow-sm">
        <h2 class="border-bottom">POST MANAGEMENT</h2>
        <div class="mb-3">
            <Card Class="shadow-sm">
                <CardHeader Class="d-flex justify-content-between">
                    <div>Summary</div>
                    @if (JobPost.ExpiresAt < DateTime.Now)
                    {
                        <Badge Color="BadgeColor.Danger" VisuallyHiddenText="Expired">Expired</Badge>
                    }
                </CardHeader>
                <CardBody>
                    <CardTitle>@JobPost.Title</CardTitle>
                    <CardText Class="text-truncate-two">@JobPost.Description</CardText>
                </CardBody>
            </Card>
        </div>
        <div class="row">
            <div class="col-6 text-start">
                <Button Type="ButtonType.Link" To="@($"/Job/{JobPost.Id}")" Color="ButtonColor.Warning">Edit</Button>
                <ActionConfirmation Action="Delete" DeleteCallBack="DeletePost"
                                    DialogTitle="Are you sure you want to delete this Post?"
                                    DialogMessage1="This will delete the Post. Once deleted can not be rolled back."
                                    DialogMessage2="Do you want to proceed?"></ActionConfirmation>
            </div>
            <div class="col-6 text-end">
                <Button Type="ButtonType.Button" Color="ButtonColor.Secondary"
                        @onclick='() => OpenInNewTab($"/Job/Details/{JobPost.Id}")'>
                    Details <Icon Name="IconName.BoxArrowUpRight" />
                </Button>
            </div>
        </div>
    </div>
    <br />
    <div class="container rounded bg-white py-3 shadow-sm">
        <h2 class="border-bottom">APPLICANTS MANAGEMENT</h2>
        <div class="row mb-2">
            <div class="col-6 text-start">
                <ActionConfirmation Action="Accept"
                                    Disable="(selectedApplication is null || selectedApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Accept))"
                                    DeleteCallBack="ApplicationAccepted"
                                    ButtonColor="ButtonColor.Success"
                                    DialogTitle="Are you sure you want to accept this application?"
                                    DialogMessage1="Do you want to proceed?">
                </ActionConfirmation>
                <ActionConfirmation Action="Reject"
                                    Disable="(selectedApplication is null || selectedApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Rejected))"
                                    DeleteCallBack="ApplicationRejected"
                                    ButtonColor="ButtonColor.Danger"
                                    DialogTitle="Are you sure you want to reject this application?"
                                    DialogMessage1="Do you want to proceed?">
                </ActionConfirmation>
            </div>
            <div class="col-6 text-end">
                @if (selectedApplication is null)
                {
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Disabled="true">Message</Button>
                }
                else
                {
                    <Button Type="ButtonType.Button" Color="ButtonColor.Primary" @onclick='() => OpenInNewTab($"/Messages?id={selectedApplication.UserID}")'>Message</Button>
                }

            </div>
        </div>

        <Grid TItem="JobApplication"
              Class="table table-hover table-bordered table-striped"
              Data="JobApplicationsList"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="10"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Single"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true"
              RowClass="GetRowClass">

            <GridColumns>
                <GridColumn TItem="JobApplication" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.User.Email">@context.User.Email</GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Phone Number" PropertyName="PhoneNumber" SortKeySelector="item => item.User.PhoneNumber">@context.User.PhoneNumber</GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Applied At" PropertyName="Applied At" SortKeySelector="item => item.AppliedAt">@TimeSinceApplied(context.AppliedAt)</GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Resume" PropertyName="Resume" SortKeySelector="item => item.Resume">
                    @if (string.IsNullOrEmpty(context.Resume))
                    {
                        <text>Empty</text>
                    }
                    else
                    {
                        <Button Type="ButtonType.Button" Class="w-100" @onclick='() => OpenInNewTab($"/{context.Resume}")'>
                            Show
                        </Button>
                    }
                    
                </GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Cover Letter" PropertyName="CoverLetter" SortKeySelector="item => item.CoverLetter">
                    @if (string.IsNullOrEmpty(context.CoverLetter))
                    {
                        <text>Empty</text>
                    }
                    else
                    {
                        <Button Type="ButtonType.Button" Class="w-100" @onclick='() => OnShowModalClick(context.CoverLetter)'>
                            Show
                        </Button>
                    }
                </GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Status" PropertyName="Status" SortKeySelector="item => item.ApplicationStatus">@context.ApplicationStatus</GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Profile" PropertyName="Profile">
                    <Button Type="ButtonType.Button" Class="w-100" @onclick='() => OpenInNewTab($"/Profile?id={context.UserID}")'>
                        Profile
                    </Button>
                </GridColumn>
            </GridColumns>
            <GridDetailView TItem="JobApplication">
                <div class="row">
                    <div class="col-2 fw-bold">Resume</div>
                    <div class="col">@context.Resume</div>
                </div>
                <div class="row">
                    <div class="col-2 fw-bold">Cover Letter</div>
                    <div class="col">@context.CoverLetter</div>
                </div>
            </GridDetailView>
        </Grid>
    </div>
}

<Modal @ref="modal" Title="Cover Letter" IsVerticallyCentered="true" IsScrollable="true" Size="ModalSize.Large">
    <BodyTemplate>
        @RawDescription()
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;

    // Cascading parameter to get the current authentication state
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    private ClaimsPrincipal user = new();

    // Parameter to receive the JobPost ID
    [Parameter]
    public int CurrentJobPostId { get; set; }

    // JobPost object to hold the job post details
    private JobPost? JobPost { get; set; }
    // List to hold job applications for the job post
    private List<JobApplication> JobApplicationsList { get; set; } = new();
    // Selected job application
    private JobApplication? selectedApplication = default!;
    private string? selectedCoverLetter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            user = authState.User;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // Get the current user's ID
        string? userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        // Get the current user's roles
        List<string> UserRoles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();

        // Check if the user is an admin
        if (UserRoles.Contains(SD.Role_Admin))
        {
            // Get the job post by ID for admin
            JobPost = await JobPostRepo.GetAsync(filter: x => x.Id == CurrentJobPostId);
        }
        else
        {
            // Get the job post by ID and user ID for non-admin users
            JobPost = await JobPostRepo.GetAsync(filter: x => x.Id == CurrentJobPostId && x.UserID == userId);
        }

        // Get the job applications for the job post
        await GetJobApplications();
    }

    // Method to fetch job applications for the job post
    private async Task GetJobApplications()
    {
        if (JobPost is not null)
        {
            // Fetch job applications including user details
            JobApplicationsList = await JobApplicationRepo.GetAllAsync(filter: f => f.JobPostID == CurrentJobPostId, includeProperties: "User");
        }
        else
        {
            // Navigate to a NotFound page if the job post is null
            NavManager.NavigateTo("/NotFound");
        }
    }

    // Method to handle selection of job applications
    private Task OnSelectedItemsChanged(HashSet<JobApplication> aJobApplication)
    {
        // Update the selected application
        var selectedApplicationHash = aJobApplication is not null && aJobApplication.Any() ? aJobApplication : new();
        selectedApplication = selectedApplicationHash.FirstOrDefault();
        return Task.CompletedTask;
    }

    // Method to determine the CSS class for a job application row based on its status
    private string GetRowClass(JobApplication aJobApplication)
    {
        if (aJobApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Rejected))
            return "table-danger";
        else if (aJobApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Accept))
            return "table-success";

        return string.Empty;
    }

    // Method to open a URL in a new tab using JavaScript interop
    private async Task OpenInNewTab(string URL) => await JS.InvokeVoidAsync("openInNewTab", URL);

    // Method to mark an application as rejected
    private async Task ApplicationRejected()
    {
        if (selectedApplication is not null)
        {
            JobApplication application = selectedApplication;

            if (!application.ApplicationStatus.Equals(SD.ApplicationStatus_Rejected))
            {
                application.ApplicationStatus = SD.ApplicationStatus_Rejected;
                await JobApplicationRepo.UpdateAsync(application);
            }
            await GetJobApplications();
        }
    }

    // Method to mark an application as accepted
    private async Task ApplicationAccepted()
    {
        if (selectedApplication is not null)
        {
            JobApplication application = selectedApplication;

            if (!application.ApplicationStatus.Equals(SD.ApplicationStatus_Accept))
            {
                application.ApplicationStatus = SD.ApplicationStatus_Accept;
                await JobApplicationRepo.UpdateAsync(application);
            }
            await GetJobApplications();
        }
    }

    // Method to delete the current job post
    private async Task DeletePost()
    {
        if (JobPost is not null)
        {
            await JobPostRepo.RemoveAsync(JobPost);
            // Navigate to the dashboard after deleting the post
            NavManager.NavigateTo("/Recruiters/dashboard");
        }
    }

    private async Task OnShowModalClick(string content)
    {
        selectedCoverLetter = content;
        await modal.ShowAsync();
    }
    private async Task OnHideModalClick() => await modal.HideAsync();

    // Method to return the job post description as a MarkupString with <br> tags for new lines
    private MarkupString RawDescription()
    {
        if (string.IsNullOrEmpty(selectedCoverLetter))
        {
            return new MarkupString(string.Empty);
        }

        var formattedText = selectedCoverLetter.Replace("\n", "<br>").Replace("\r", "");
        return new MarkupString(formattedText);
    }

    // Method to calculate the time since an application was applied
    private string TimeSinceApplied(DateTime date)
    {
        string text = "";
        // Calculate the time difference from the given date to now
        var timeSpan = DateTime.Now - date;

        if (timeSpan.TotalMinutes < 1)
        {
            text = "just now";
        }
        else if (timeSpan.TotalMinutes < 60)
        {
            text = $"{(int)timeSpan.TotalMinutes} mins ago";
        }
        else if (timeSpan.TotalHours < 24)
        {
            text = $"{(int)timeSpan.TotalHours} hours ago";
        }
        else if (timeSpan.TotalDays < 30)
        {
            text = $"{(int)timeSpan.TotalDays} days ago";
        }
        else if (timeSpan.TotalDays < 365)
        {
            text = $"{(int)timeSpan.TotalDays / 30} months ago";
        }
        else
        {
            text = $"{(int)timeSpan.TotalDays / 365} years ago";
        }
        return text;
    }
}
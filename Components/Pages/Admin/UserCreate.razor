@page "/admin/User"
@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> _userManager;

@inject IServiceScopeFactory ServiceScopeFactory

@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Create JobPost</PageTitle>

<div class="container">
    <br />
    <div class="card p-4">
        <h2 class="border-bottom">CREATE User</h2>

        <EditForm Enhance Model="UserInput" OnValidSubmit="Submit" FormName="UserInputForm">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="Email">Email</label>
                        <InputText id="Email" @bind-Value="UserInput.Email" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="PhoneNumber">Phone Number</label>
                        <InputText id="PhoneNumber" @bind-Value="UserInput.PhoneNumber" class="form-control" />
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label for="Password">Password</label>
                        <InputText type="password" id="Password" @bind-Value="UserInput.Password" class="form-control" />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label for="ConfirmPassword">Confirm Password</label>
                        <InputText type="password" id="ConfirmPassword" @bind-Value="UserInput.ConfirmPassword" class="form-control" />
                    </div>
                </div>
            </div>
            <br />
            <div class="form-group">
                <label for="Role">Role</label>
                <InputSelect id="Role" class="form-select" @bind-Value="UserInput.Role">
                    @foreach (var item in Roles)
                    {
                        <option>@item</option>
                    }
                </InputSelect>
            </div>
            <br />
            <ValidationSummary />
            <div class="row">
                <div class="col-6 text-start"><button type="submit" class="btn btn-primary">Create</button></div>
                <div class="col-6 text-end"><a href="/admin/users" class="btn btn-outline-primary">cancel</a></div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // Model to bind the user input form
    [SupplyParameterFromForm]
    private InputModel UserInput { get; set; } = new();

    // List to hold roles fetched from the RoleManager
    private List<string?> Roles = new();

    // After the component has rendered, fetch the roles if it's the first render
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                // Fetch roles using RoleManager and store them in Roles list
                var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
                Roles = await roleManager.Roles.Select(r => r.Name).ToListAsync();
            }
        }
    }

    // Method to handle form submission
    private async Task Submit()
    {
        // Create a new ApplicationUser object with the input data
        ApplicationUser User = new()
            {
                Email = UserInput.Email,
                UserName = UserInput.Email,
                PhoneNumber = UserInput.PhoneNumber,
                CreatedAt = DateTime.Now
            };

        try
        {
            // Create the user in the identity system
            var result = await _userManager.CreateAsync(User, UserInput.Password);

            // If user creation is successful, add the user to the selected role
            if (result.Succeeded)
            {
                await _userManager.AddToRoleAsync(User, UserInput.Role);
            }
            // Navigate to the admin users page
            NavManager.NavigateTo("/admin/users");
        }
        catch (Exception ex)
        {
            // Log any exception that occurs during user creation
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    // Input model to hold the form data
    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Role { get; set; } = SD.Role_JobSeeker;

        [Display(Name = "Phone Number")]
        public string? PhoneNumber { get; set; }
    }
}
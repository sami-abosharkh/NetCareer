@page "/JobPost/{id:int?}"

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject IJobPostRepository JobPostRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = $"{SD.Role_Admin},{SD.Role_Recruiter}")]

<PageTitle>@(Id.HasValue ? "Edit Post" : "Add Post")</PageTitle>

<div class="container">
    <br />
    <div class="card p-4">

        @if (this.JobPost is null)
        {
            <h2 class="text-danger border-bottom">NOT FOUND</h2>
            <p>This job post is not found</p>
        }
        else
        {
            <h2 class="border-bottom">@(Id.HasValue ? "EDIT POST" : "ADD POST")</h2>
            <EditForm Enhance Model="this.JobPost" OnValidSubmit="Submit" FormName="JobPostForm">
                <DataAnnotationsValidator />

                @if (JobPost.Id > 0)
                {
                    <InputNumber @bind-Value="JobPost.Id" hidden></InputNumber>
                }

                <div class="form-group">
                    <label for="Title">Title</label>
                    <InputText id="Title" @bind-Value="JobPost.Title" class="form-control" />
                </div>
                <br />
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="Company">Company</label>
                            <InputText id="Company" @bind-Value="JobPost.Company" class="form-control" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="Location">Location</label>
                            <InputText id="Location" @bind-Value="JobPost.Location" class="form-control" />
                        </div>
                    </div>
                </div>
                <br />
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label for="Position">Position</label>
                            <InputText id="Position" @bind-Value="JobPost.Position" class="form-control" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label for="SalaryRange">Salary Range</label>
                            <CurrencyInput TValue="int?" id="SalaryRange" @bind-Value="JobPost.SalaryRange" Placeholder="Enter amount" />
                        </div>
                    </div>
                </div>
                <br />
                <div class="form-group">
                    <label for="Description">Description</label>
                    <InputTextArea id="Description" @bind-Value="JobPost.Description" class="form-control" rows="10" />
                </div>
                <br />
                <label for="ExpiresAt">ExpiresAt</label>
                <InputDate id="ExpiresAt" @bind-Value="JobPost.ExpiresAt" class="form-control" />
                <br />
                <ValidationSummary />
                <div class="row">
                    <div class="col-6"><button type="submit" class="btn btn-primary">@(Id.HasValue ? "Save" : "Publish")</button></div>
                    <div class="col-6 text-end"><a href="/JobPosts" class="btn btn-outline-primary">cancel</a></div>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    [SupplyParameterFromForm]
    public JobPost? JobPost { get; set; }

    private string? userId;

    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal user = authenticationState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (Id.HasValue)
        {
            List<string> userRoles = user.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value).ToList();

            if (userRoles.Contains(SD.Role_Admin))
            {
                JobPost = await JobPostRepo.GetAsync(x => x.Id == Id);
            }
            else if (userRoles.Contains(SD.Role_Recruiter))
            {
                JobPost = await JobPostRepo.GetAsync(x => x.Id == Id && x.UserID == userId);
            }
        }
        else
        {
            this.JobPost = new()
                {
                    Title = "Test",
                    ExpiresAt = DateTime.Now.AddMonths(1),
                    Company = "Test",
                    Location = "Test",
                    SalaryRange = 0,
                    Description = "I need an "
                };
        }
    }



    private async Task Submit()
    {
        if (JobPost is null) return;
        
        try
        {
            if (JobPost.Id > 0)
            {
                Console.WriteLine("Updating JobPost...");
                await JobPostRepo.UpdateAsync(JobPost);
            }
            else
            {
                JobPost.PostedAt = DateTime.Now;
                JobPost.UserID = userId;

                Console.WriteLine("Creating new JobPost...");
                await JobPostRepo.CreateAsync(JobPost);
            }

            NavManager.NavigateTo("/JobPosts");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
@page "/admin/users"

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> _userManager;

@attribute [Authorize(Roles = SD.Role_Admin)]

<PageTitle>Users Management</PageTitle>

<div class="container">
    <br />
    <div class="card p-4">
        <h2 class="border-bottom">USERS MANAGEMENT</h2>

        <div class="row mb-2">

            <div class="col-6 text-start">
                <Button Type="ButtonType.Button" Color="ButtonColor.Secondary"
                        Disabled="@(!selectedUser.Any())">
                    Details
                </Button>
                <ActionConfirmation Object="selectedUser.FirstOrDefault()" DeleteCallBack="LockOutUser" Action="@(isLockedOut ? "Unlock" : "Lockout")"
                                    ButtonColor="@(isLockedOut ? ButtonColor.Success : ButtonColor.Danger)"
                                    DialogTitle="Are you sure you want to lockout this User?"
                                    DialogMessage1="Do you want to proceed?"></ActionConfirmation>
                <ActionConfirmation Object="selectedUser.FirstOrDefault()" DeleteCallBack="DeleteUser" Action="Delete"
                                    DialogTitle="Are you sure you want to delete this User?"
                                    DialogMessage1="This will delete the User. Once deleted can not be rolled back."
                                    DialogMessage2="Do you want to proceed?"></ActionConfirmation>
            </div>
            <div class="col-6 text-end">
                <Button Type="ButtonType.Link" To="@($"/admin/User")" Color="ButtonColor.Primary" Outline="true">Create User</Button>
            </div>
        </div>

        <Grid TItem="ApplicationUser"
              Class="table table-hover table-bordered table-striped"
              DataProvider="UsersDataProvider"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="10"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Single"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="ApplicationUser" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">@context.Email</GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Phone Number" PropertyName="PhoneNumber" SortKeySelector="item => item.PhoneNumber">@context.PhoneNumber</GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Created At" PropertyName="CreatedAt" SortKeySelector="item => item.CreatedAt">@context.CreatedAt</GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Last Login" PropertyName="LastLogin" SortKeySelector="item => item.LastLogin">@context.LastLogin</GridColumn>
                <GridColumn TItem="ApplicationUser" HeaderText="Lockout End" PropertyName="LockoutEnd" SortKeySelector="item => item.LockoutEnd">@context.LockoutEnd</GridColumn>
            </GridColumns>
        </Grid>
    </div>
</div>

<Preload LoadingText="Loading..." />

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private List<ApplicationUser> UsersList { get; set; } = default!;
    private HashSet<ApplicationUser> selectedUser = new();

    private bool isLockedOut;

    private async Task<GridDataProviderResult<ApplicationUser>> UsersDataProvider(GridDataProviderRequest<ApplicationUser> request)
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");

        if (UsersList is null) // pull employees only one time for client-side filtering, sorting, and paging
            UsersList = _userManager.Users.ToList(); // call a service or an API to pull the employees

        PreloadService.Hide();
        return await Task.FromResult(request.ApplyTo(UsersList));
    }

    private async Task OnSelectedItemsChanged(HashSet<ApplicationUser> aUser)
    {
        selectedUser = aUser is not null && aUser.Any() ? aUser : new();
        await CheckLockOutUser();
    }

    private async Task DeleteUser()
    {
        ApplicationUser? user = selectedUser.FirstOrDefault();

        if (user is not null)
        {
            await _userManager.DeleteAsync(user);
            NavManager.Refresh(true);
        }
    }

    private async Task CheckLockOutUser()
    {
        ApplicationUser? user = selectedUser.FirstOrDefault();

        if (user is not null)
        {
            isLockedOut = await _userManager.IsLockedOutAsync(user);
        }
    }

    private async Task LockOutUser()
    {
        ApplicationUser? user = selectedUser.FirstOrDefault();

        if (user is not null)
        {
            if (isLockedOut)
            {
                await _userManager.SetLockoutEndDateAsync(user, DateTime.Now);
            }
            else
            {
                await _userManager.SetLockoutEndDateAsync(user, DateTime.Now.AddMinutes(5));
            }
            NavManager.Refresh(true);
        }
    }
}

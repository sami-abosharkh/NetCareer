@page "/JobPost/Details/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavManager
@inject IJobPostRepository JobPostRepo
@inject IJobApplicationRepository JobApplicationRepo
@inject IProfileRepository ProfileRepo
@inject AuthenticationStateProvider AuthenticationStateProvider

<TitleComponent Title="Post Details" Header="Post Details"></TitleComponent>

@if (JobPost is null)
{
    <h2 class="text-danger border-bottom">NOT FOUND</h2>
    <p>This job post is not found</p>
}
else
{
    <div class="container">
        <div class="card p-4">
            <h2 class="border-bottom text-center">@JobPost.Title</h2>
            <p class="bg-light">@JobPost.Description</p>
            <hr />
            <div class="row bg-light">
                <div class="col-3">
                    <h2 class="border-bottom">Company</h2>
                    <p class="text-decoration-underline">@JobPost.Company</p>
                </div>
                <div class="col-3">
                    <h2 class="border-bottom">Position</h2>
                    <p class="text-decoration-underline">@JobPost.Position</p>
                </div>

                <div class="col-3">
                    <h2 class="border-bottom">Location</h2>
                    <p class="text-decoration-underline">@JobPost.Location</p>
                </div>
                <div class="col-3">
                    <h2 class="border-bottom">Salary</h2>
                    <p>@(JobPost.SalaryRange > 0 ? JobPost.SalaryRange.ToString() : "Not specified")</p>
                </div>
            </div>
            <hr />
            @if (!hasProfile)
            {
                <Alert Color="AlertColor.Danger" Dismissable="false">
                    <Icon Name="IconName.ExclamationTriangleFill" class="me-2"></Icon>
                    Create a profile in order to apply for this job, click on <a href="/Account/Manage">Link</a>
                </Alert>
            }
            <div class="row text-start">
                <div class="col-6">
                    <AuthorizeView Roles="@SD.Role_JobSeeker">
                        @if (JobApplication is not null)
                        {
                            @if (JobApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Applied))
                            {
                                <Button Type="ButtonType.Button" Color="ButtonColor.Primary" Disabled>Applied</Button>
                            }
                            else if (JobApplication.ApplicationStatus.Equals(SD.ApplicationStatus_Saved))
                            {
                                <Button @onclick="ApplyJobApplication"
                                        Type="ButtonType.Button" Color="ButtonColor.Primary">
                                    Apply
                                </Button>
                                <Button @onclick="UnsavedJobApplication"
                                        Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true">
                                    Unsave
                                </Button>
                            }
                        }
                        else
                        {
                            <Button @onclick="ApplyJobApplication"
                                    Type="ButtonType.Button" Color="ButtonColor.Primary">
                                Apply
                            </Button>
                            <Button @onclick="SaveJobApplication"
                                    Type="ButtonType.Button" Color="ButtonColor.Secondary" Outline="true">
                                Save
                            </Button>
                        }
                    </AuthorizeView>
                </div>
                <div class="col-6 text-end">
                    <Button Type="ButtonType.Link" To="/" Color="ButtonColor.Primary" Outline="true">Back</Button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    [Inject] ModalService ModalService { get; set; } = default!;

    [Parameter]
    public int? Id { get; set; }

    private JobPost? JobPost { get; set; }
    private JobApplication? JobApplication { get; set; } = default!;
    private string? userId;
    private bool hasProfile = true;

    protected override async Task OnParametersSetAsync()
    {
        JobPost = await JobPostRepo.GetAsync(x => x.Id == Id);

        AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (JobPost is not null)
        {
            JobApplication = await JobApplicationRepo.GetAsync(f => f.JobPostID == JobPost.Id && f.UserID == userId);
        }
    }

    private async Task SaveJobApplication()
    {
        if (string.IsNullOrEmpty(userId)) return;

        if (JobApplication is null)
        {
            JobApplication = new()
                {
                    JobPostID = JobPost.Id,
                    UserID = userId,
                    AppliedAt = DateTime.Now,
                    ApplicationStatus = SD.ApplicationStatus_Saved
                };

            await JobApplicationRepo.CreateAsync(JobApplication);
        }
    }

    private async Task UnsavedJobApplication()
    {
        if (JobApplication is not null)
        {
            await JobApplicationRepo.RemoveAsync(JobApplication);
            NavManager.Refresh(true);
        }
    }

    private async Task ApplyJobApplication()
    {
        if (string.IsNullOrEmpty(userId)) return;

        Profile? HasProfile = await ProfileRepo.GetAsync(filter: f => f.UserID == userId);

        if (HasProfile is null)
        {
            hasProfile = false;
            return;
        }

        if (JobApplication is null)
        {
            JobApplication = new()
                {
                    JobPostID = JobPost.Id,
                    UserID = userId,
                    AppliedAt = DateTime.Now,
                    ApplicationStatus = SD.ApplicationStatus_Applied
                };

            await JobApplicationRepo.CreateAsync(JobApplication);
        }
        else
        {
            JobApplication.ApplicationStatus = SD.ApplicationStatus_Applied;
            await JobApplicationRepo.UpdateAsync(JobApplication);
        }
    }
}
@page "/JobPost/{id:int}/Applicants/"

@inject NavigationManager NavManager
@inject IJobApplicationRepository JobApplicationRepo
@rendermode InteractiveServer

<div class="container">
    <TitleComponent Title="Applicants" Header="Applicants"></TitleComponent>
    <br />
    <div class="card p-4">
        <h2 class="border-bottom">APPLICANTS MANAGEMENT</h2>
        <div class="row mb-2">
            <div class="col-6 text-start">
                <Button Type="ButtonType.Button" Color="ButtonColor.Primary">Message</Button>
                <ActionConfirmation Object="selectedApplication.FirstOrDefault()" DeleteCallBack="RejectApplication" Action="Reject"
                                    DialogTitle="Are you sure you want to reject this application?"
                                    DialogMessage1="This will reject the application. Once deleted can not be rolled back."
                                    DialogMessage2="Do you want to proceed?"></ActionConfirmation>

                <Button Type="ButtonType.Button" Color="ButtonColor.Danger" Outline="true">Reject</Button>
            </div>
            <div class="col-6 text-end">
                <Button Type="ButtonType.Link" To="@($"/JobPost")" Color="ButtonColor.Primary" Outline="true">New Post</Button>
            </div>
            </div>

        <Grid TItem="JobApplication"
              Class="table table-hover table-bordered table-striped"
              DataProvider="JobApplicationsDataProvider"
              AllowSorting="true"
              AllowPaging="true"
              PageSize="10"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Single"
              SelectedItemsChanged="OnSelectedItemsChanged"
              AllowDetailView="true"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="JobApplication" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.User.Email">@context.User.Email</GridColumn>
                <GridColumn TItem="JobApplication" HeaderText="Applied At" PropertyName="Applied At" SortKeySelector="item => item.AppliedAt">@TimeSinceApplied(context.AppliedAt)</GridColumn>
            </GridColumns>
            <GridDetailView  TItem="JobApplication">
                <div class="row">
                    <div class="col-2 fw-bold">Resume</div>
                    <div class="col">@context.Resume</div>
                </div>
                <div class="row">
                    <div class="col-2 fw-bold">Cover Letter</div>
                    <div class="col">@context.CoverLetter</div>
                </div>
            </GridDetailView>

        </Grid>
    </div>
</div>

<Preload LoadingText="Loading..." />

@code {
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    [Parameter]
    public int? Id { get; set; }
    private List<JobApplication>? JobApplicationList { get; set; } = default!;
    private HashSet<JobApplication> selectedApplication = new();

    private async Task<GridDataProviderResult<JobApplication>> JobApplicationsDataProvider(GridDataProviderRequest<JobApplication> request)
    {
        PreloadService.Show(SpinnerColor.Light, "Loading data...");

        if (JobApplicationList is null)
        {
            JobApplicationList = await JobApplicationRepo.GetAllAsync(filter: f => f.JobPostID == Id && f.ApplicationStatus == SD.ApplicationStatus_Applied, includeProperties: "User");
        }

        PreloadService.Hide();

        return await Task.FromResult(request.ApplyTo(JobApplicationList));
    }

    private Task OnSelectedItemsChanged(HashSet<JobApplication> aJobApplication)
    {
        selectedApplication = aJobApplication is not null && aJobApplication.Any() ? aJobApplication : new();
        return Task.CompletedTask;
    }

    private async Task RejectApplication()
    {
        JobApplication? application = selectedApplication.FirstOrDefault();

        if (application is not null)
        {
            application.ApplicationStatus = SD.ApplicationStatus_Rejected;
            await JobApplicationRepo.UpdateAsync(application);
            NavManager.Refresh(true);
        }
    }

    private string TimeSinceApplied(DateTime PostedAt)
    {
        string text = "";
        // Calculate the time difference from last updated
        var timeSpan = DateTime.Now - PostedAt;

        if (timeSpan.TotalMinutes < 1)
        {
            text = "just now";
        }
        else if (timeSpan.TotalMinutes < 60)
        {
            text = $"{(int)timeSpan.TotalMinutes} mins ago";
        }
        else if (timeSpan.TotalHours < 24)
        {
            text = $"{(int)timeSpan.TotalHours} hours ago";
        }
        else
        {
            text = $"{(int)timeSpan.TotalDays} days ago";
        }
        return text;
    }
}

<div>
    <div class="row">
        <div class="col-8">
            <h6>@Experience.JobTitle</h6>
            <p>@Experience.CompanyName</p>
            <p>@Experience.Location | @Experience.StartDate.ToString("yyyy-MM") - @Experience.EndDate?.ToString("yyyy-MM")</p>
        </div>
        <div class="col-4 d-flex justify-content-end">
            @if (!string.IsNullOrEmpty(Experience.Description))
            {
                <div class="align-self-end">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Light" @onclick="() => collapseRef.ToggleAsync()">Description</Button>
                </div>
            }
            <AuthorizeView>
                @if (IsCurrentUser)
                {
                    <div class="vr mx-2"></div>
                    <div class="d-flex flex-column">
                        <Button Type="ButtonType.Button" class="mb-2"><Icon Name="IconName.Pencil" @onclick="() => ExperienceEditCallback.InvokeAsync()" /></Button>
                        <ActionConfirmation Action="Trash" ButtonColor="ButtonColor.Light"
                                            DeleteCallBack="() => ExperienceDeleteCallback.InvokeAsync()"
                                            DialogTitle="Are you sure you want to delete this experience?"
                                            DialogMessage1="This will delete the experience. Once deleted can not be rolled back."
                                            DialogMessage2="Do you want to proceed?">
                        </ActionConfirmation>
                    </div>
                }
            </AuthorizeView>
        </div>
    </div>
    @if (!string.IsNullOrEmpty(Experience.Description))
    {
        <Collapse @ref="collapseRef">
            <hr />
            <p>@RawDescription(Experience.Description)</p>
        </Collapse>
    }
</div>

@code {
    private Collapse collapseRef = default!;

    [Parameter]
    public EventCallback<int> ExperienceDeleteCallback { get; set; }

    [Parameter]
    public EventCallback ExperienceEditCallback { get; set; }

    [Parameter]
    public Experience Experience { get; set; } = default!;

    [Parameter]
    public bool IsCurrentUser { get; set; } = false;

    private MarkupString RawDescription(string text)
    {
        if (string.IsNullOrEmpty(text))
        {
            return new MarkupString(string.Empty);
        }

        // Replace new line characters with <br> HTML tags
        var formattedText = text.Replace("\n", "<br>").Replace("\r", "");
        return new MarkupString(formattedText);
    }

}

<Modal @ref="modal" title="Experience" UseStaticBackdrop="true" CloseOnEscape="false">
    <BodyTemplate>
        <p>
            Enhance your profile by adding an work experience section.
        </p>
        <br />
        <EditForm Model="UserInput" OnValidSubmit="Submit" FormName="ExperienceForm" method="post">
            <DataAnnotationsValidator />

            @if (UserInput.Id > 0)
            {
                <InputNumber @bind-Value="UserInput.Id" hidden />
                <InputNumber @bind-Value="UserInput.ProfileID" hidden />
            }

            <div class="form-floating">
                <InputText id="CompanyName" @bind-Value="UserInput.CompanyName" class="form-control" />
                <label for="CompanyName" class="form-label">Company Name</label>
                <ValidationMessage For="@(() => UserInput.CompanyName)" class="text-danger" />
            </div>
            <div class="my-2"></div>
            <div class="form-floating">
                <InputText id="JobTitle" @bind-Value="UserInput.JobTitle" class="form-control" />
                <label for="JobTitle" class="form-label">Job Title</label>
                <ValidationMessage For="@(() => UserInput.JobTitle)" class="text-danger" />
            </div>

            <div class="my-2"></div>
            <div class="form-floating">
                <InputText id="Location" @bind-Value="UserInput.Location" class="form-control" />
                <label for="Location" class="form-label">Location</label>
                <ValidationMessage For="@(() => UserInput.Location)" class="text-danger" />
            </div>
            <div class="my-2"></div>
            <div class="form-floating">
                <InputTextArea id="Description" @bind-Value="UserInput.Description" rows="10" class="form-control" />
                <label for="Description" class="form-label">Description</label>
                <ValidationMessage For="@(() => UserInput.Description)" class="text-danger" />
            </div>
            <div class="my-2"></div>
            <div class="row">
                <div class="col-6">
                    <div class="form-floating">
                        <InputDate id="StartDate" @bind-Value="UserInput.StartDate" class="form-control" Placeholder="Enter Date" />
                        <label for="StartDate" class="form-label">Start Date</label>
                        <ValidationMessage For="@(() => UserInput.StartDate)" class="text-danger" />
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-floating">
                        <InputDate id="EndDate" @bind-Value="UserInput.EndDate" class="form-control" Placeholder="Enter Date" />
                        <label for="EndDate" class="form-label">End Date</label>
                        <ValidationMessage For="@(() => UserInput.EndDate)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="my-3"></div>
            <div class="text-center">
                <button type="submit" class="btn btn-primary w-50 shadow">Save</button>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Cancel</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;

    [Parameter]
    public EventCallback<Experience> ExperienceModelCallback { get; set; }

    [SupplyParameterFromForm]
    private Experience UserInput { get; set; } = new();

    public async Task OnShowModalClick(Experience? model = default!)
    {
        if (model is not null)
        {
            UserInput = model;
        }
        else
        {
            UserInput = new()
                {
                    StartDate = DateTime.Now,
                    EndDate = DateTime.Now
                };
        }
        await modal.ShowAsync();
    }
    private async Task OnHideModalClick() => await modal.HideAsync();

    private async Task Submit()
    {
        await OnHideModalClick();
        await ExperienceModelCallback.InvokeAsync(UserInput);
        UserInput = new();
    }
}